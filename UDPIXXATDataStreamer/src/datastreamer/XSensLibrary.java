package datastreamer;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.WString;
/**
 * JNA Wrapper for library <b>test</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface XSensLibrary extends Library {
	
	public static final String OS_ARCH = System.getProperty("sun.arch.data.model");
	public static final int MAX_FREQUENCY = 65535;
	public static final String JNA_LIBRARY_NAME = "XSensLibrary_" + ((OS_ARCH.equals("64"))?"r64":"r32");
	public static final XSensLibrary INSTANCE = (XSensLibrary)Native.loadLibrary(XSensLibrary.JNA_LIBRARY_NAME, XSensLibrary.class);

	/**
	 * This function tries to set the serial key. If it succeeds,<br>
	 * tries to find the first USB attached device. If it succeeds,<br>
	 * returns device ID else returns 0.<br>
	 * Original signature : <code>int findFirstUSBDevice(const wchar_t*)</code><br>
	 */
	int findFirstUSBDevice(WString serialKey);
	
	/**
	 * This function returns if a device has been found.<br>
	 * Original signature : <code>int isDeviceFound()</code><br>
	 */
	int isDeviceFound();
	
	/**
	 * This function returns found device ID or 0 if no device has been found.<br>
	 * Original signature : <code>int getDeviceID()</code><br>
	 */
	int getDeviceID();
	
	/**
	 * This function open device port and prepare it to send data to call back function.<br>
	 * Original signature : <code>int openPort()</code><br>
	 */
	int openPort();
	
	/**
	 * This function close device port, eventually stopping measurement.<br>
	 * Original signature : <code>void closePort()</code><br>
	 */
	void closePort();
	
	/**
	 * This function set the sample frequency of the device<br>
	 * Default sample frequency is defined to maximum (65535, MAX_FREQUENCY).
	 * Set the new sample frequency if you want to change it before calling
	 * configureDevice() method.
	 * Original signature : <code>void setSampleFrequency(int)</code><br>
	 */
	void setSampleFrequency(int sf);
	
	/**
	 * This function returns the sample frequency of the device<br>
	 * Original signature : <code>int getSampleFrequency()</code><br>
	 */
	int getSampleFrequency();
	
	/**
	 * This function configure device to output gyroscope and temperature data<br>
	 * Original signature : <code>int configurationDevice()</code><br>
	 * <i>native declaration : line 81</i>
	 */
	int configureDevice();
	
	/**
	 * This function puts device in measurement mode<br>
	 * Original signature : <code>int gotoMeasurement()</code><br>
	 */
	int gotoMeasurement();
	
	/**
	 * This function tells if new values are available<br>
	 * Original signature : <code>int areNewValuesAvailable()</code><br>
	 */
	int areNewValuesAvailable();
	
	/**
	 * Return gyroscope X value (rad/s)<br>
	 * Original signature : <code>double getGyroX()</code><br>
	 */
	double getGyroX();
	
	/**
	 * Return gyroscope Y value (rad/s)<br>
	 * Original signature : <code>double getGyroY()</code><br>
	 */
	double getGyroY();
	
	/**
	 * Return gyroscope Z value (rad/s)<br>
	 * Original signature : <code>double getGyroZ()</code><br>
	 */
	double getGyroZ();
	
	/**
	 * Return acceleration X value (m/s²)<br>
	 * Original signature : <code>double getAccelX()</code><br>
	 * <i>native declaration : line 155</i>
	 */
	double getAccelX();
	
	/**
	 * Return acceleration Y value (m/s²)<br>
	 * Original signature : <code>double getAccelY()</code><br>
	 * <i>native declaration : line 165</i>
	 */
	double getAccelY();
	
	/**
	 * Return acceleration Z value (m/s²)<br>
	 * Original signature : <code>double getAccelZ()</code><br>
	 * <i>native declaration : line 175</i>
	 */
	double getAccelZ();
	
	/**
	 * Return magnetic field X value<br>
	 * Original signature : <code>double getMagX()</code><br>
	 * <i>native declaration : line 185</i>
	 */
	double getMagX();
	
	/**
	 * Return magnetic field Y value<br>
	 * Original signature : <code>double getMagY()</code><br>
	 * <i>native declaration : line 195</i>
	 */
	double getMagY();
	
	/**
	 * Return magnetic field Z value<br>
	 * Original signature : <code>double getMagZ()</code><br>
	 * <i>native declaration : line 205</i>
	 */
	double getMagZ();
	
	
	/**
	 * This function frees allocated memory from the library.<br>
	 * Must always be called before exiting calling program.<br>
	 * Original signature : <code>void freeAllocatedMemory()</code><br>
	 */
	void freeAllocatedMemory();
}

